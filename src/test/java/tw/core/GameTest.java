package tw.core;/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import tw.core.exception.OutOfGuessCountException;
import tw.core.generator.AnswerGenerator;
import tw.core.model.GuessResult;

import java.util.Arrays;
import java.util.List;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;
import static org.junit.jupiter.api.Assertions.fail;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static tw.core.GameStatus.CONTINUE;
import static tw.core.GameStatus.SUCCESS;

public class GameTest {

    private final Answer actualAnswer = Answer.createAnswer("1 2 3 4");
    private Game game;

    @BeforeEach
    public void setUp() throws Exception {
        AnswerGenerator answerGenerator = mock(AnswerGenerator.class);
        when(answerGenerator.generate()).thenReturn(actualAnswer);
        game = new Game(answerGenerator);
    }


    @Test
    public void should_get_the_success_status_when_guess_input_is_correct() throws Exception {

        //given
//        excuteSuccessGuess();
        GuessResult guess = game.guess(Answer.createAnswer("1 2 3 4"));
        //when
        //then
        assertThat(guess.getResult(), is("4A0B"));

    }

    @Test
    public void should_get_guess_count_over_6_status_when_guess_input_is_over_6() throws Exception {
        try {
            GuessResult guess = game.guess(Answer.createAnswer("1 2 3 4"));
            game.guess(Answer.createAnswer("1 2 3 4"));
            game.guess(Answer.createAnswer("1 2 3 4"));
            game.guess(Answer.createAnswer("1 2 3 4"));
            game.guess(Answer.createAnswer("1 2 3 4"));
            game.guess(Answer.createAnswer("1 2 3 4"));
            assertThat(guess.getResult(), is("4A0B"));
        }catch (OutOfGuessCountException e){
            fail("Guess count cant over 6!");
        }
    }
    @Test
    public void should_get_4A0B_status_when_guess_input_is_1234() throws Exception {
        try {
            GuessResult guess = game.guess(Answer.createAnswer("1 2 3 4"));
            assertThat(guess.getResult(), is("4A0B"));
        }catch (OutOfGuessCountException e){
            fail("Guess count cant over 6!");
        }
    }
    @Test
    public void should_get_the_Record_when_call_checkStatus_input_inputAnswer_1_2_3_4() throws Exception {
        //given
        Answer inputAnswer = new Answer();
        List<String> numList = Arrays.asList("1","2","3","4");
        inputAnswer.setNumList(numList);
        //when
        String result = inputAnswer.toString();
        //then
        assertThat(result,is("1 2 3 4"));

    }
    @Test
    public void should_get_the_success_status_when_checkStatus_input_is_1234() throws Exception {
        try {
            GuessResult guess = game.guess(Answer.createAnswer("1 2 3 4"));
            assertThat(game.checkStatus(), is(SUCCESS));
        }catch (OutOfGuessCountException e){
            fail("Guess count cant over 6!");
        }
    }
    @Test
    public void should_get_the_CONTINUE_status_when_checkStatus_input_1235() throws Exception {
        try {
            GuessResult guess = game.guess(Answer.createAnswer("1 2 3 5"));
            assertThat(game.checkStatus(), is(CONTINUE));
        }catch (OutOfGuessCountException e){
            fail("Guess count cant over 6!");
        }
    }

    @Test
    public void should_get_the_Fail_status_when_checkStatus_input_1235() throws Exception {
        try {
            GuessResult guess = game.guess(Answer.createAnswer("1 2 3 5"));
            game.guess(Answer.createAnswer("1 2 3 5"));
            game.guess(Answer.createAnswer("1 2 3 5"));
            game.guess(Answer.createAnswer("1 2 3 5"));
            game.guess(Answer.createAnswer("1 2 3 5"));
            game.guess(Answer.createAnswer("1 2 3 5"));
            game.guess(Answer.createAnswer("1 2 3 5"));
            assertThat(game.checkStatus(), is(CONTINUE));
        }catch (OutOfGuessCountException e){
            fail("Guess count cant over 6!");
        }
    }

    @Test
    public void should_get_the_CONTINUE_status_when_guessHistory_input_1235() throws Exception {
        try {
            GuessResult guess = game.guess(Answer.createAnswer("1 2 3 4"));
            assertThat(game.guessHistory().get(0).getResult(), is("4A0B"));
        }catch (OutOfGuessCountException e){
            fail("Guess count cant over 6!");
        }
    }
}
